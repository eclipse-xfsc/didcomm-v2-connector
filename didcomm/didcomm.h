

// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!



#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
	// We also try to prevent mixing versions of shared uniffi header structs.
	// If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V6
	#ifndef UNIFFI_SHARED_HEADER_V6
		#error Combining helper code from multiple versions of uniffi is not supported
	#endif // ndef UNIFFI_SHARED_HEADER_V6
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V6
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️

typedef struct RustBuffer {
	int32_t capacity;
	int32_t len;
	uint8_t *data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);

// Task defined in Rust that Go executes
typedef void (*RustTaskCallback)(const void *, int8_t);

// Callback to execute Rust tasks using a Go routine
//
// Args:
//   executor: ForeignExecutor lowered into a uint64_t value
//   delay: Delay in MS
//   task: RustTaskCallback to call
//   task_data: data to pass the task callback
typedef int8_t (*ForeignExecutorCallback)(uint64_t, uint32_t, RustTaskCallback, void *);

typedef struct ForeignBytes {
	int32_t len;
	const uint8_t *data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
	int8_t code;
	RustBuffer errorBuf;
} RustCallStatus;

// Continuation callback for UniFFI Futures
typedef void (*RustFutureContinuation)(void * , int8_t);

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V6 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Needed because we can't execute the callback directly from go.
void cgo_rust_task_callback_bridge_didcomm(RustTaskCallback, const void *, int8_t);

int8_t uniffiForeignExecutorCallbackdidcomm(uint64_t, uint32_t, RustTaskCallback, void*);

void uniffiFutureContinuationCallbackdidcomm(void*, int8_t);

void uniffi_didcomm_uniffi_fn_free_didcomm(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_didcomm_uniffi_fn_constructor_didcomm_new(
	uint64_t did_resolver,
	uint64_t secret_resolver,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_didcomm_pack_encrypted(
	void* ptr,
	RustBuffer msg,
	RustBuffer to,
	RustBuffer from,
	RustBuffer sign_by,
	RustBuffer options,
	uint64_t cb,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_didcomm_pack_from_prior(
	void* ptr,
	RustBuffer msg,
	RustBuffer issuer_kid,
	uint64_t cb,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_didcomm_pack_plaintext(
	void* ptr,
	RustBuffer msg,
	uint64_t cb,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_didcomm_pack_signed(
	void* ptr,
	RustBuffer msg,
	RustBuffer sign_by,
	uint64_t cb,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_didcomm_unpack(
	void* ptr,
	RustBuffer msg,
	RustBuffer options,
	uint64_t cb,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_didcomm_unpack_from_prior(
	void* ptr,
	RustBuffer from_prior_jwt,
	uint64_t cb,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_didcomm_wrap_in_forward(
	void* ptr,
	RustBuffer msg,
	RustBuffer headers,
	RustBuffer to,
	RustBuffer routing_keys,
	RustBuffer enc_alg_anon,
	uint64_t cb,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_free_exampledidresolver(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_didcomm_uniffi_fn_constructor_exampledidresolver_new(
	RustBuffer known_dids,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_exampledidresolver_resolve(
	void* ptr,
	RustBuffer did,
	void* cb,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_free_examplesecretsresolver(
	void* ptr,
	RustCallStatus* out_status
);

void* uniffi_didcomm_uniffi_fn_constructor_examplesecretsresolver_new(
	RustBuffer known_secrets,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_examplesecretsresolver_find_secrets(
	void* ptr,
	RustBuffer secret_ids,
	void* cb,
	RustCallStatus* out_status
);

RustBuffer uniffi_didcomm_uniffi_fn_method_examplesecretsresolver_get_secret(
	void* ptr,
	RustBuffer secret_id,
	void* cb,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_free_ondidresolverresult(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_method_ondidresolverresult_error(
	void* ptr,
	RustBuffer err,
	RustBuffer msg,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_method_ondidresolverresult_success(
	void* ptr,
	RustBuffer result,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_free_onfindsecretsresult(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_method_onfindsecretsresult_error(
	void* ptr,
	RustBuffer err,
	RustBuffer msg,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_method_onfindsecretsresult_success(
	void* ptr,
	RustBuffer result,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_free_ongetsecretresult(
	void* ptr,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_method_ongetsecretresult_error(
	void* ptr,
	RustBuffer err,
	RustBuffer msg,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_method_ongetsecretresult_success(
	void* ptr,
	RustBuffer result,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_didresolver(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_onfrompriorpackresult(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_onfrompriorunpackresult(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_onpackencryptedresult(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_onpackplaintextresult(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_onpacksignedresult(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_onunpackresult(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_onwrapinforwardresult(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void uniffi_didcomm_uniffi_fn_init_callback_secretsresolver(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

RustBuffer ffi_didcomm_uniffi_rustbuffer_alloc(
	int32_t size,
	RustCallStatus* out_status
);

RustBuffer ffi_didcomm_uniffi_rustbuffer_from_bytes(
	ForeignBytes bytes,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rustbuffer_free(
	RustBuffer buf,
	RustCallStatus* out_status
);

RustBuffer ffi_didcomm_uniffi_rustbuffer_reserve(
	RustBuffer buf,
	int32_t additional,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_continuation_callback_set(
	RustFutureContinuation callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_u8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_u8(
	void* handle,
	RustCallStatus* out_status
);

uint8_t ffi_didcomm_uniffi_rust_future_complete_u8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_i8(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_i8(
	void* handle,
	RustCallStatus* out_status
);

int8_t ffi_didcomm_uniffi_rust_future_complete_i8(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_u16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_u16(
	void* handle,
	RustCallStatus* out_status
);

uint16_t ffi_didcomm_uniffi_rust_future_complete_u16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_i16(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_i16(
	void* handle,
	RustCallStatus* out_status
);

int16_t ffi_didcomm_uniffi_rust_future_complete_i16(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_u32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_u32(
	void* handle,
	RustCallStatus* out_status
);

uint32_t ffi_didcomm_uniffi_rust_future_complete_u32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_i32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_i32(
	void* handle,
	RustCallStatus* out_status
);

int32_t ffi_didcomm_uniffi_rust_future_complete_i32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_u64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_u64(
	void* handle,
	RustCallStatus* out_status
);

uint64_t ffi_didcomm_uniffi_rust_future_complete_u64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_i64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_i64(
	void* handle,
	RustCallStatus* out_status
);

int64_t ffi_didcomm_uniffi_rust_future_complete_i64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_f32(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_f32(
	void* handle,
	RustCallStatus* out_status
);

float ffi_didcomm_uniffi_rust_future_complete_f32(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_f64(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_f64(
	void* handle,
	RustCallStatus* out_status
);

double ffi_didcomm_uniffi_rust_future_complete_f64(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_pointer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_pointer(
	void* handle,
	RustCallStatus* out_status
);

void* ffi_didcomm_uniffi_rust_future_complete_pointer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_rust_buffer(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

RustBuffer ffi_didcomm_uniffi_rust_future_complete_rust_buffer(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_poll_void(
	void* handle,
	void* uniffi_callback,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_cancel_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_free_void(
	void* handle,
	RustCallStatus* out_status
);

void ffi_didcomm_uniffi_rust_future_complete_void(
	void* handle,
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didcomm_pack_encrypted(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didcomm_pack_from_prior(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didcomm_pack_plaintext(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didcomm_pack_signed(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didcomm_unpack(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didcomm_unpack_from_prior(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didcomm_wrap_in_forward(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_exampledidresolver_resolve(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_examplesecretsresolver_find_secrets(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_examplesecretsresolver_get_secret(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_ondidresolverresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_ondidresolverresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onfindsecretsresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onfindsecretsresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_ongetsecretresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_ongetsecretresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_constructor_didcomm_new(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_constructor_exampledidresolver_new(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_constructor_examplesecretsresolver_new(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_didresolver_resolve(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onfrompriorpackresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onfrompriorpackresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onfrompriorunpackresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onfrompriorunpackresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onpackencryptedresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onpackencryptedresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onpackplaintextresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onpackplaintextresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onpacksignedresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onpacksignedresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onunpackresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onunpackresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onwrapinforwardresult_success(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_onwrapinforwardresult_error(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_secretsresolver_get_secret(
	RustCallStatus* out_status
);

uint16_t uniffi_didcomm_uniffi_checksum_method_secretsresolver_find_secrets(
	RustCallStatus* out_status
);

uint32_t ffi_didcomm_uniffi_uniffi_contract_version(
	RustCallStatus* out_status
);


int32_t didcomm_uniffi_cgo_DIDResolver(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_OnFromPriorPackResult(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_OnFromPriorUnpackResult(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_OnPackEncryptedResult(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_OnPackPlaintextResult(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_OnPackSignedResult(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_OnUnpackResult(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_OnWrapInForwardResult(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);
int32_t didcomm_uniffi_cgo_SecretsResolver(uint64_t, int32_t, uint8_t *, int32_t, RustBuffer *);

